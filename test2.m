%[errorMat,syndromeMat]=get_error_circuit(numInputSymbols,Qtransfer,filename_prefix);


size(errorMat)
size(syndromeMat)
sumError=sum(errorMat);
data=sumError;
data( :, ~any(data,1) ) = [];  %columns


function [errorMat,syndromeMat]=get_error_circuit(numInputSymbols,Qtransfer,filename_prefix)
%get error generated by the cpp program for circuit model
%errorMat save qubit errors in the form of numInputSymbols
%syndrome error is not saved
%syndrome is saved in syndromeMatCircuit

%  addpath('~/working/matlab/mmio/')              %add path for mmio %already added in the beginning of this file
% The readin gpart takes half time of this function
errorFile   =[filename_prefix,'error.mtx'];
syndromeFile=[filename_prefix,'syndrome.mtx'];
%  errorFile   =[folder,'/code1repeat3p0.001000error.mtx'];
%  syndromeFile=[folder,'/code1repeat3p0.001000syndrome.mtx'];
errorMatCircuit = mmread(errorFile);
syndromeMatCircuit=mmread(syndromeFile);

t=size(errorMatCircuit,1);
nm=size(Qtransfer,2);
m=sum(Qtransfer);                              %number of checks
n=nm-m;                                        %number of qubits

%combine X and Z errors, binary vector --> GF4 vector. extra zero positions are removed
errorMatCircuit=plusGF4vec(errorMatCircuit(:,1:n),2*errorMatCircuit(:,1+end/2:n+1+end/2));

%In AG part, I only measure the repeating part in the CPP program, for the initial 8 and last 8 measurement, I need to add it manually here. When the code is large enough, this should not affect the result.
%structure of syndrome:x=(1+r+1)*2|8|(r-1)*4|8, total 6r+16=m
%when r=7, x=18, m=58
syndromeMatCircuit=full(    syndromeMatCircuit);
syndromeMatCircuit(:,18+[1,2,3])=syndromeMatCircuit(:,[1,1,2]);
syndromeMatCircuit(:,18+4)=bitxor(syndromeMatCircuit(:,1),syndromeMatCircuit(:,2));
syndromeMatCircuit(:,18+5)=bitxor(syndromeMatCircuit(:,1),syndromeMatCircuit(:,3));
syndromeMatCircuit(:,18+6)=bitxor(syndromeMatCircuit(:,18+5),syndromeMatCircuit(:,2));
syndromeMatCircuit(:,18+7)=bitxor(syndromeMatCircuit(:,2),syndromeMatCircuit(:,4));
syndromeMatCircuit(:,18+8)=bitxor(syndromeMatCircuit(:,18+7),syndromeMatCircuit(:,3));

syndromeMatCircuit(:,59-[1,2,4])=syndromeMatCircuit(:,19-[1,1,2]);
syndromeMatCircuit(:,59-3)=bitxor(syndromeMatCircuit(:,19-1),syndromeMatCircuit(:,19-2));
syndromeMatCircuit(:,59-6)=bitxor(syndromeMatCircuit(:,19-1),syndromeMatCircuit(:,19-3));
syndromeMatCircuit(:,59-5)=bitxor(syndromeMatCircuit(:,59-6),syndromeMatCircuit(:,19-2));
syndromeMatCircuit(:,59-8)=bitxor(syndromeMatCircuit(:,19-2),syndromeMatCircuit(:,19-4));
syndromeMatCircuit(:,59-7)=bitxor(syndromeMatCircuit(:,59-8),syndromeMatCircuit(:,19-3));

syndromeMatCircuit=    syndromeMatCircuit(:,1:m);
errorMat=zeros(t,nm);                           %save error in the form of numInputSymbols.

[temp,order]=sort(numInputSymbols); %temp is in increasing order,
                                    %temp = [2 2 .... 2 4 ... 4]
                                    %order=[[indexes of measuring bits],[indexes of qubits]]
errorMat(:,order((m+1):end))=errorMatCircuit(:,:);  %map qubit errors
syndromeMat=full(syndromeMatCircuit);
toc
end
